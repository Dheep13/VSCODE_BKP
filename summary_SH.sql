CREATE PROCEDURE EXT.TRYG_SH_SUMMARY (in_batchName VARCHAR(100)) 
LANGUAGE SQLSCRIPT 
SQL SECURITY INVOKER 
DEFAULT SCHEMA EXT AS 
/*---------------------------------------------------------------------
    | Author: Deepan 
    | Project Title: Consultant
    | Company: SAP Callidus
    | Initial Version Date: 21-February-2023
    |----------------------------------------------------------------------
    | Procedure Purpose: 
    | Version: 0.1	21-February-2023	Intial Version
    -----------------------------------------------------------------------
    */
BEGIN
	--Row type variables declarations
	DECLARE v_periodRow ROW LIKE TCMP.CS_PERIOD;
	DECLARE v_puRow ROW LIKE TCMP.CS_PROCESSINGUNIT;
	DECLARE v_unitTypeRow ROW LIKE TCMP.CS_UNITTYPE;


	--Variable declarations
	DECLARE v_tenantid VARCHAR(50);
	DECLARE v_procedureName VARCHAR(50);
	DECLARE v_slqerrm VARCHAR(4000);
	DECLARE v_eventType VARCHAR(50);
	DECLARE v_batchName VARCHAR(100);
    DECLARE v_key1 VARCHAR(50);
    DECLARE v_key2 VARCHAR(50);
    DECLARE v_key3 VARCHAR(50);
    DECLARE v_value1 VARCHAR(50);
    DECLARE v_value2 VARCHAR(50);
    DECLARE v_value3 VARCHAR(50);
    DECLARE v_DKK VARCHAR(50);
    DECLARE v_summEvent VARCHAR(50);
    DECLARE v_omtegSumId VARCHAR(50);
    DECLARE v_SumId VARCHAR(50);
	DECLARE v_test VARCHAR(5000);

    DECLARE v_retention INT;
    DECLARE v_TRYG_SUMMARY_TXN_sql VARCHAR(100000);
    DECLARE v_TRYG_SUMM_TXN_RED_sql VARCHAR(100000); --redemption
    DECLARE v_TRYG_SUMM_TXN_STD_sql VARCHAR(100000); --standard
    DECLARE v_summInd BOOLEAN;
    DECLARE v_summIndUnitType VARCHAR(50);

	DECLARE v_removeDate DATE;
	DECLARE v_executionDate TIMESTAMP;
	DECLARE v_lastrunDate TIMESTAMP;
    DECLARE v_accType VARCHAR(10);

	DECLARE v_Count INT;
    DECLARE v_Sq  VARCHAR(5);
    DECLARE v_Star  VARCHAR(5);
	DECLARE v_sqlCount INT;
	DECLARE v_maxSalesTxnSeq BIGINT;

   
	-- Exeception Handling
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN v_slqerrm := ::SQL_ERROR_MESSAGE;
		CALL EXT.TRYG_LOG(v_procedureName,'ERROR = '||IFNULL(:v_slqerrm,'') ,NULL);
	END;

	--------------------------------------------------------------------------- 
	v_procedureName:='TRYG_SH_SUMMARY';
	v_eventType = 'SC-DK-001-001';
	v_removeDate = TO_DATE('01/01/2200','mm/dd/yyyy');
	v_executionDate	= current_timestamp;
	v_sqlCount = 0;
	v_Count = 0;
    v_Sq = CHAR(39);
    v_Star = CHAR(42);
    v_DKK='DKK';
    v_summEvent='SC-DK-001-001-SUMMARY';
    v_omtegSumId='Omtegning Summary';
    v_SumId='SUM';
    v_summInd=TRUE;
    v_summIndUnitType='integer';
    v_accType ='Ã†NDR';
    v_batchName = in_batchName;

--	SELECT * INTO v_puRow FROM TCMP.CS_PROCESSINGUNIT cp WHERE cp.PROCESSINGUNITSEQ = in_ProcessingUnitSeq;
--	SELECT * INTO v_periodRow FROM TCMP.CS_PERIOD cp WHERE cp.PERIODSEQ = in_PeriodSeq AND cp.REMOVEDATE = v_removeDate;
--	SELECT * INTO v_unitTypeRow FROM TCMP.CS_UNITTYPE cu WHERE cu.REMOVEDATE = v_removeDate AND cu.name = 'quantity';

--SELECT DISTINCT BATCHNAME INTO v_batchName from CS_STAGESALESTRANSACTION
--WHERE BATCHNAME like '%SCDK001001%' AND STAGEPROCESSFLAG=0 ;


SELECT VALUE INTO v_retention FROM  CS_FIXEDVALUE WHERE name = 'FV_RETENTION' and removedate >  CURRENT_TIMESTAMP;


--Delete records if greater than retention period maintained in FV
DELETE FROM EXT.TRYG_SUMMARY_TXN_ASSIGN TA WHERE EXISTS (SELECT 1 FROM EXT.TRYG_SUMMARY_TXN TS
WHERE  TA.STAGESALESTRANSACTIONSEQ=TS.STAGESALESTRANSACTIONSEQ AND ACCOUNTINGDATE <= add_days(CURRENT_TIMEstamp, v_retention ));

DELETE FROM EXT.TRYG_SUMMARY_TXN
WHERE ACCOUNTINGDATE <= add_days(CURRENT_TIMEstamp, v_retention );

--Delete records if we are reloading a batch 
DELETE FROM EXT.TRYG_SUMMARY_TXN
WHERE BATCHNAME =:v_batchName;

DELETE FROM EXT.TRYG_SUMMARY_TXN_ASSIGN
WHERE BATCHNAME =:v_batchName;

DELETE FROM CS_STAGETRANSACTIONASSIGN WHERE BATCHNAME=:v_batchName AND EVENTTYPEID = :v_summEvent;

DELETE FROM CS_STAGESALESTRANSACTION WHERE BATCHNAME=:v_batchName AND EVENTTYPEID = :v_summEvent;

COMMIT;

--INSERT INTO EXT.SQL_CHECK VALUES ('DELETE');

SELECT max(stagesalestransactionseq)
	INTO v_maxSalesTxnSeq
	FROM cs_stagesalestransaction;

CALL EXT.TRYG_LOG(v_procedureName,'Get the max stage salestransaction seq ',v_maxSalesTxnSeq);

--Dynamic sql based on values in Classifier to create SUMMARY for redemption transactions
v_TRYG_SUMM_TXN_RED_sql = 'INSERT INTO	EXT.TRYG_SUMMARY_TXN
	(  TENANTID,
	    STAGESALESTRANSACTIONSEQ,
		BATCHNAME,
		ORDERID,
		LINENUMBER,
		SUBLINENUMBER,
		EVENTTYPEID,
		ALTERNATEORDERNUMBER,
		ACCOUNTINGDATE,
		GENERICNUMBER1,
		UNITTYPEFORGENERICNUMBER1,
		GENERICNUMBER2,
		UNITTYPEFORGENERICNUMBER2,
		GENERICNUMBER3,
		UNITTYPEFORGENERICNUMBER3,
		GENERICNUMBER5,
		UNITTYPEFORGENERICNUMBER5,
		GENERICATTRIBUTE16,
		VALUE,
		UNITTYPEFORVALUE,
		COMPENSATIONDATE,
		STAGEPROCESSFLAG,
		GENERICATTRIBUTE1,
		GENERICATTRIBUTE2,
		GENERICATTRIBUTE3,
		GENERICATTRIBUTE4,
		GENERICATTRIBUTE5,
		GENERICATTRIBUTE6,
		GENERICATTRIBUTE7,
		GENERICATTRIBUTE8,
		GENERICATTRIBUTE9,
		GENERICATTRIBUTE10,
		GENERICATTRIBUTE11,
		GENERICATTRIBUTE12,
		GENERICATTRIBUTE13,
		GENERICATTRIBUTE14,
		GENERICATTRIBUTE15,
		GENERICATTRIBUTE17,
		GENERICATTRIBUTE18,
		GENERICATTRIBUTE19,
		GENERICATTRIBUTE20,
		GENERICATTRIBUTE21,
		GENERICATTRIBUTE22,
		GENERICATTRIBUTE23,
		GENERICATTRIBUTE24,
		GENERICATTRIBUTE25,
		GENERICATTRIBUTE26,
		GENERICATTRIBUTE27,
		GENERICATTRIBUTE28,
		GENERICATTRIBUTE29,
		GENERICATTRIBUTE30,
		GENERICATTRIBUTE31,
		GENERICATTRIBUTE32,
		GENERICNUMBER4,
		UNITTYPEFORGENERICNUMBER4,
		GENERICNUMBER6,
		UNITTYPEFORGENERICNUMBER6,
		GENERICDATE1,
		GENERICDATE2,
		GENERICDATE3,
		GENERICDATE4,
		GENERICDATE5,
		GENERICDATE6,
		GENERICBOOLEAN1,
		GENERICBOOLEAN2,
		GENERICBOOLEAN3,
		GENERICBOOLEAN4,
		GENERICBOOLEAN5,
		GENERICBOOLEAN6
			)
	(
	SELECT
	  TENANTID,'||
		:v_maxSalesTxnSeq ||'+ ROW_NUMBER() OVER (ORDER BY ALTERNATEORDERNUMBER) ,'
		||:v_Sq||:v_batchName||:v_Sq||',
		ALTERNATEORDERNUMBER||'||:v_Sq||'-'||:v_omtegSumId||:v_Sq||' ORDERID,
        1 LINENUMBER,
		SUBLINENUMBER,'
		||:v_Sq||:v_summEvent||:v_Sq||'EVENTTYPEID,
		ALTERNATEORDERNUMBER,
		LAST_VALUE(ACCOUNTINGDATE ORDER BY LINENUMBER) ACCOUNTINGDATE,
		IFNULL(LAST_VALUE(GENERICNUMBER5 ORDER BY LINENUMBER),0) GENERICNUMBER1,
		LAST_VALUE(UNITTYPEFORGENERICNUMBER1 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER1,
		SUM(GENERICNUMBER2) GENERICNUMBER2,
		LAST_VALUE(UNITTYPEFORGENERICNUMBER2 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER2,
		LAST_VALUE(GENERICNUMBER3 ORDER BY LINENUMBER) GENERICNUMBER3,
		LAST_VALUE(UNITTYPEFORGENERICNUMBER3 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER3,
 		LAST_VALUE(GENERICNUMBER5 ORDER BY LINENUMBER) GENERICNUMBER5,
		LAST_VALUE(UNITTYPEFORGENERICNUMBER5 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER5,
		SUM(GENERICNUMBER1) GENERICATTRIBUTE16, 
        '||:v_Sq|| '0' ||:v_Sq|| ',' ||:v_Sq||
		:v_DKK ||:v_Sq||',
		LAST_VALUE(COMPENSATIONDATE ORDER BY LINENUMBER) COMPENSATIONDATE,
		'||:v_Sq|| '0' ||:v_Sq||',
 		LAST_VALUE(GENERICATTRIBUTE1 ORDER BY LINENUMBER) GENERICATTRIBUTE1,
		LAST_VALUE(GENERICATTRIBUTE2 ORDER BY LINENUMBER) GENERICATTRIBUTE2,' 
		||:v_Sq||:v_Star||:v_Sq||',
		LAST_VALUE(GENERICATTRIBUTE4 ORDER BY LINENUMBER) GENERICATTRIBUTE4,
		LAST_VALUE(GENERICATTRIBUTE5 ORDER BY LINENUMBER) GENERICATTRIBUTE5,
		LAST_VALUE(GENERICATTRIBUTE6 ORDER BY LINENUMBER) GENERICATTRIBUTE6,
		LAST_VALUE(GENERICATTRIBUTE7 ORDER BY LINENUMBER) GENERICATTRIBUTE7,
		LAST_VALUE(GENERICATTRIBUTE8 ORDER BY LINENUMBER) GENERICATTRIBUTE8,
		LAST_VALUE(GENERICATTRIBUTE9 ORDER BY LINENUMBER) GENERICATTRIBUTE9,
		LAST_VALUE(GENERICATTRIBUTE10 ORDER BY LINENUMBER) GENERICATTRIBUTE10,
		LAST_VALUE(GENERICATTRIBUTE11 ORDER BY LINENUMBER) GENERICATTRIBUTE11,
		LAST_VALUE(GENERICATTRIBUTE12 ORDER BY LINENUMBER) GENERICATTRIBUTE12,
		LAST_VALUE(GENERICATTRIBUTE13 ORDER BY LINENUMBER) GENERICATTRIBUTE13,
		LAST_VALUE(GENERICATTRIBUTE14 ORDER BY LINENUMBER) GENERICATTRIBUTE14,
		LAST_VALUE(GENERICATTRIBUTE16 ORDER BY LINENUMBER) GENERICATTRIBUTE15,
		LAST_VALUE(GENERICATTRIBUTE17 ORDER BY LINENUMBER) GENERICATTRIBUTE17,
		LAST_VALUE(GENERICATTRIBUTE18 ORDER BY LINENUMBER) GENERICATTRIBUTE18,
		LAST_VALUE(GENERICATTRIBUTE19 ORDER BY LINENUMBER) GENERICATTRIBUTE19,
		LAST_VALUE(GENERICATTRIBUTE20 ORDER BY LINENUMBER) GENERICATTRIBUTE20,
		LAST_VALUE(GENERICATTRIBUTE21 ORDER BY LINENUMBER) GENERICATTRIBUTE21,
		LAST_VALUE(GENERICATTRIBUTE22 ORDER BY LINENUMBER) GENERICATTRIBUTE22,
		LAST_VALUE(GENERICATTRIBUTE23 ORDER BY LINENUMBER) GENERICATTRIBUTE23,
		LAST_VALUE(GENERICATTRIBUTE24 ORDER BY LINENUMBER) GENERICATTRIBUTE24,
		LAST_VALUE(GENERICATTRIBUTE25 ORDER BY LINENUMBER) GENERICATTRIBUTE25,
		LAST_VALUE(GENERICATTRIBUTE26 ORDER BY LINENUMBER) GENERICATTRIBUTE26,
		LAST_VALUE(GENERICATTRIBUTE27 ORDER BY LINENUMBER) GENERICATTRIBUTE27,
		LAST_VALUE(GENERICATTRIBUTE28 ORDER BY LINENUMBER) GENERICATTRIBUTE28,
		LAST_VALUE(GENERICATTRIBUTE29 ORDER BY LINENUMBER) GENERICATTRIBUTE29,
		LAST_VALUE(GENERICATTRIBUTE30 ORDER BY LINENUMBER) GENERICATTRIBUTE30,
		LAST_VALUE(GENERICATTRIBUTE31 ORDER BY LINENUMBER) GENERICATTRIBUTE31,
		LAST_VALUE(GENERICATTRIBUTE32 ORDER BY LINENUMBER) GENERICATTRIBUTE32,
        LAST_VALUE(GENERICNUMBER4 ORDER BY LINENUMBER) GENERICNUMBER4,
		LAST_VALUE(UNITTYPEFORGENERICNUMBER4 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER4,
        LAST_VALUE(GENERICNUMBER6 ORDER BY LINENUMBER) GENERICNUMBER6,
		LAST_VALUE(UNITTYPEFORGENERICNUMBER6 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER6,
 		LAST_VALUE(GENERICDATE1 ORDER BY LINENUMBER) GENERICDATE1,
        LAST_VALUE(GENERICDATE2 ORDER BY LINENUMBER) GENERICDATE2,
		LAST_VALUE(GENERICDATE3 ORDER BY LINENUMBER) GENERICDATE3,
        LAST_VALUE(GENERICDATE4 ORDER BY LINENUMBER) GENERICDATE4,
		LAST_VALUE(GENERICDATE5 ORDER BY LINENUMBER) GENERICDATE5,
		LAST_VALUE(GENERICDATE6 ORDER BY LINENUMBER) GENERICDATE6,
        LAST_VALUE(GENERICBOOLEAN1 ORDER BY LINENUMBER) GENERICBOOLEAN1,
		LAST_VALUE(GENERICBOOLEAN2 ORDER BY LINENUMBER) GENERICBOOLEAN2,
		1,
		LAST_VALUE(GENERICBOOLEAN4 ORDER BY LINENUMBER) GENERICBOOLEAN4,
		LAST_VALUE(GENERICBOOLEAN5 ORDER BY LINENUMBER) GENERICBOOLEAN5,
		LAST_VALUE(GENERICBOOLEAN6 ORDER BY LINENUMBER) GENERICBOOLEAN6
	FROM
		CS_STAGESALESTRANSACTION WHERE 
		BATCHNAME='||:v_Sq ||:v_batchName ||:v_Sq||
	    ' AND EVENTTYPEID='||:v_Sq||:v_eventType||:v_Sq;
	    
	
select gc.genericattribute1,gc.genericattribute2,gc.genericattribute3,gc.genericattribute4,
gc.genericattribute5 , gc.genericattribute6 INTO v_key1, v_value1, v_key2, 
 v_value2, v_key3, v_value3
from cs_category cat
join cs_categorytree ct on CT.CATEGORYTREESEQ=CAT.CATEGORYTREESEQ
join cs_category_classifiers cc on CC.CATEGORYTREESEQ=CAT.CATEGORYTREESEQ and CC.CATEGORYSEQ=CAT.RULEELEMENTSEQ
join cs_classifier cl on CL.CLASSIFIERSEQ=CC.CLASSIFIERSEQ
join cs_genericclassifier gc on cl.classifierseq=gc.classifierseq
where CAT.REMOVEDATE=to_date('22000101','yyyymmdd')
and CC.REMOVEDATE=to_date('22000101','yyyymmdd')
and CT.REMOVEDATE=to_date('22000101','yyyymmdd')
and CL.REMOVEDATE=to_date('22000101','yyyymmdd')
and gc.REMOVEDATE=to_date('22000101','yyyymmdd')
and ct.name='Omtegning'
and cat.name='Omtegning'
and classifierid='Omtegning';


COMMIT;

IF :v_value1 IS NOT NULL AND :v_value1 <> 'Ã†NDR'
THEN v_TRYG_SUMM_TXN_RED_sql = :v_TRYG_SUMM_TXN_RED_sql || ' and ' || :v_key1 || '=' || :v_Sq || :v_value1 || :v_Sq;
END IF;

IF :v_value2 IS NOT NULL AND :v_value2 <> 'Ã†NDR'
THEN v_TRYG_SUMM_TXN_RED_sql = :v_TRYG_SUMM_TXN_RED_sql || ' and ' || :v_key2 || '=' || :v_Sq || :v_value2 || :v_Sq;
END IF;

IF :v_value3 IS NOT NULL AND :v_value3 <> 'Ã†NDR'
THEN v_TRYG_SUMM_TXN_RED_sql = :v_TRYG_SUMM_TXN_RED_sql || ' and ' || :v_key3 || '=' || :v_Sq || :v_value3 || :v_Sq;
END IF;

v_TRYG_SUMM_TXN_RED_sql = v_TRYG_SUMM_TXN_RED_sql || ' GROUP BY TENANTID, BATCHNAME,ALTERNATEORDERNUMBER,SUBLINENUMBER
)';

	COMMIT;	

EXEC v_TRYG_SUMM_TXN_RED_sql;
COMMIT;

SELECT IFNULL(max(stagesalestransactionseq),0)
	INTO v_maxSalesTxnSeq
	FROM EXT.TRYG_SUMMARY_TXN;
	
	CALL EXT.TRYG_LOG(v_procedureName,'Get the max stage salestransaction seq ',v_maxSalesTxnSeq);

commit;


--SQL to create SUMMARY for standard transactions
INSERT INTO EXT.TRYG_SUMMARY_TXN
	(  TENANTID,
	    STAGESALESTRANSACTIONSEQ,
		BATCHNAME,
		ORDERID,
		LINENUMBER,
		SUBLINENUMBER,
		EVENTTYPEID,
		ALTERNATEORDERNUMBER,
		ACCOUNTINGDATE,
		GENERICNUMBER1,
		UNITTYPEFORGENERICNUMBER1,
		GENERICNUMBER2,
		UNITTYPEFORGENERICNUMBER2,
		GENERICNUMBER3,
		UNITTYPEFORGENERICNUMBER3,
		VALUE,
		UNITTYPEFORVALUE,
		COMPENSATIONDATE,
		STAGEPROCESSFLAG,
		GENERICATTRIBUTE1,
		GENERICATTRIBUTE2,
		GENERICATTRIBUTE3,
		GENERICATTRIBUTE4,
		GENERICATTRIBUTE5,
		GENERICATTRIBUTE6,
		GENERICATTRIBUTE7,
		GENERICATTRIBUTE8,
		GENERICATTRIBUTE9,
		GENERICATTRIBUTE10,
		GENERICATTRIBUTE11,
		GENERICATTRIBUTE12,
		GENERICATTRIBUTE13,
		GENERICATTRIBUTE14,
		GENERICATTRIBUTE15,
		GENERICATTRIBUTE16,
		GENERICATTRIBUTE17,
		GENERICATTRIBUTE18,
		GENERICATTRIBUTE19,
		GENERICATTRIBUTE20,
		GENERICATTRIBUTE21,
		GENERICATTRIBUTE22,
		GENERICATTRIBUTE23,
		GENERICATTRIBUTE24,
		GENERICATTRIBUTE25,
		GENERICATTRIBUTE26,
		GENERICATTRIBUTE27,
		GENERICATTRIBUTE28,
		GENERICATTRIBUTE29,
		GENERICATTRIBUTE30,
		GENERICATTRIBUTE31,
		GENERICATTRIBUTE32,
		GENERICNUMBER4,
		UNITTYPEFORGENERICNUMBER4,
		GENERICNUMBER5,
		UNITTYPEFORGENERICNUMBER5,
		GENERICNUMBER6,
		UNITTYPEFORGENERICNUMBER6,
		GENERICDATE1,
		GENERICDATE2,
		GENERICDATE3,
		GENERICDATE4,
		GENERICDATE5,
		GENERICDATE6,
		GENERICBOOLEAN1,
		GENERICBOOLEAN2,
		GENERICBOOLEAN3,
		GENERICBOOLEAN4,
		GENERICBOOLEAN5,
		GENERICBOOLEAN6
		)
	(
	   SELECT
	   TENANTID,
		:v_maxSalesTxnSeq +ROW_NUMBER() OVER (ORDER BY ALTERNATEORDERNUMBER) ,
		:v_batchName,
		ALTERNATEORDERNUMBER||'-'||:v_sumId ORDERID,
		1 LINENUMBER,
		SUBLINENUMBER,
		:v_summEvent EVENTTYPEID,
		ALTERNATEORDERNUMBER,
		FIRST_VALUE(ACCOUNTINGDATE ORDER BY LINENUMBER) ACCOUNTINGDATE,
		SUM(GENERICNUMBER1) GENERICNUMBER1,
		:v_DKK UNITTYPEFORGENERICNUMBER1,
		SUM(GENERICNUMBER2) GENERICNUMBER2,
		:v_DKK UNITTYPEFORGENERICNUMBER2,
       	LAST_VALUE(GENERICNUMBER3 ORDER BY LINENUMBER) GENERICNUMBER3,
        LAST_VALUE(UNITTYPEFORGENERICNUMBER3 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER3,
        '0' ,
		:v_DKK ,
      	LAST_VALUE(COMPENSATIONDATE ORDER BY LINENUMBER) COMPENSATIONDATE,
        0,
        LAST_VALUE(GENERICATTRIBUTE1 ORDER BY LINENUMBER) GENERICATTRIBUTE1,
		LAST_VALUE(GENERICATTRIBUTE2 ORDER BY LINENUMBER) GENERICATTRIBUTE2,
		:v_Star,
		LAST_VALUE(GENERICATTRIBUTE4 ORDER BY LINENUMBER) GENERICATTRIBUTE4,
		LAST_VALUE(GENERICATTRIBUTE5 ORDER BY LINENUMBER) GENERICATTRIBUTE5,
		LAST_VALUE(GENERICATTRIBUTE6 ORDER BY LINENUMBER) GENERICATTRIBUTE6,
		LAST_VALUE(GENERICATTRIBUTE7 ORDER BY LINENUMBER) GENERICATTRIBUTE7,
		LAST_VALUE(GENERICATTRIBUTE8 ORDER BY LINENUMBER) GENERICATTRIBUTE8,
		LAST_VALUE(GENERICATTRIBUTE9 ORDER BY LINENUMBER) GENERICATTRIBUTE9,
		LAST_VALUE(GENERICATTRIBUTE10 ORDER BY LINENUMBER) GENERICATTRIBUTE10,
		LAST_VALUE(GENERICATTRIBUTE11 ORDER BY LINENUMBER) GENERICATTRIBUTE11,
		LAST_VALUE(GENERICATTRIBUTE12 ORDER BY LINENUMBER) GENERICATTRIBUTE12,
		LAST_VALUE(GENERICATTRIBUTE13 ORDER BY LINENUMBER) GENERICATTRIBUTE13,
		LAST_VALUE(GENERICATTRIBUTE14 ORDER BY LINENUMBER) GENERICATTRIBUTE14,
		LAST_VALUE(GENERICATTRIBUTE15 ORDER BY LINENUMBER) GENERICATTRIBUTE15,
		LAST_VALUE(GENERICATTRIBUTE16 ORDER BY LINENUMBER) GENERICATTRIBUTE16,
		LAST_VALUE(GENERICATTRIBUTE17 ORDER BY LINENUMBER) GENERICATTRIBUTE17,
		LAST_VALUE(GENERICATTRIBUTE18 ORDER BY LINENUMBER) GENERICATTRIBUTE18,
		LAST_VALUE(GENERICATTRIBUTE19 ORDER BY LINENUMBER) GENERICATTRIBUTE19,
		LAST_VALUE(GENERICATTRIBUTE20 ORDER BY LINENUMBER) GENERICATTRIBUTE20,
		LAST_VALUE(GENERICATTRIBUTE21 ORDER BY LINENUMBER) GENERICATTRIBUTE21,
		LAST_VALUE(GENERICATTRIBUTE22 ORDER BY LINENUMBER) GENERICATTRIBUTE22,
		LAST_VALUE(GENERICATTRIBUTE23 ORDER BY LINENUMBER) GENERICATTRIBUTE23,
		LAST_VALUE(GENERICATTRIBUTE24 ORDER BY LINENUMBER) GENERICATTRIBUTE24,
		LAST_VALUE(GENERICATTRIBUTE25 ORDER BY LINENUMBER) GENERICATTRIBUTE25,
		LAST_VALUE(GENERICATTRIBUTE26 ORDER BY LINENUMBER) GENERICATTRIBUTE26,
		LAST_VALUE(GENERICATTRIBUTE27 ORDER BY LINENUMBER) GENERICATTRIBUTE27,
		LAST_VALUE(GENERICATTRIBUTE28 ORDER BY LINENUMBER) GENERICATTRIBUTE28,
		LAST_VALUE(GENERICATTRIBUTE29 ORDER BY LINENUMBER) GENERICATTRIBUTE29,
		LAST_VALUE(GENERICATTRIBUTE30 ORDER BY LINENUMBER) GENERICATTRIBUTE30,
		LAST_VALUE(GENERICATTRIBUTE31 ORDER BY LINENUMBER) GENERICATTRIBUTE31,
		LAST_VALUE(GENERICATTRIBUTE32 ORDER BY LINENUMBER) GENERICATTRIBUTE32,
        LAST_VALUE(GENERICNUMBER4 ORDER BY LINENUMBER) GENERICNUMBER4,
        LAST_VALUE(UNITTYPEFORGENERICNUMBER4 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER4,
        LAST_VALUE(GENERICNUMBER5 ORDER BY LINENUMBER) GENERICNUMBER5,
        LAST_VALUE(UNITTYPEFORGENERICNUMBER5 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER5,
        LAST_VALUE(GENERICNUMBER6 ORDER BY LINENUMBER) GENERICNUMBER6,
        LAST_VALUE(UNITTYPEFORGENERICNUMBER6 ORDER BY LINENUMBER) UNITTYPEFORGENERICNUMBER6,
 		LAST_VALUE(GENERICDATE1 ORDER BY LINENUMBER) GENERICDATE1,
        LAST_VALUE(GENERICDATE2 ORDER BY LINENUMBER) GENERICDATE2,
		LAST_VALUE(GENERICDATE3 ORDER BY LINENUMBER) GENERICDATE3,
        LAST_VALUE(GENERICDATE4 ORDER BY LINENUMBER) GENERICDATE4,
		LAST_VALUE(GENERICDATE5 ORDER BY LINENUMBER) GENERICDATE5,
		LAST_VALUE(GENERICDATE6 ORDER BY LINENUMBER) GENERICDATE6,
        LAST_VALUE(GENERICBOOLEAN1 ORDER BY LINENUMBER) GENERICBOOLEAN1,
		LAST_VALUE(GENERICBOOLEAN2 ORDER BY LINENUMBER) GENERICBOOLEAN2,
		1,
		LAST_VALUE(GENERICBOOLEAN4 ORDER BY LINENUMBER) GENERICBOOLEAN4,
		LAST_VALUE(GENERICBOOLEAN5 ORDER BY LINENUMBER) GENERICBOOLEAN5,
		LAST_VALUE(GENERICBOOLEAN6 ORDER BY LINENUMBER) GENERICBOOLEAN6
		FROM
		CS_STAGESALESTRANSACTION SST WHERE 
		BATCHNAME=:v_batchName
	    AND EVENTTYPEID=:v_eventType
	    AND NOT EXISTS (SELECT 1 FROM TRYG_SUMMARY_TXN TS
	    WHERE SST.BATCHNAME=TS.BATCHNAME AND
	    SST.ALTERNATEORDERNUMBER=TS.ALTERNATEORDERNUMBER
	    AND SST.SUBLINENUMBER=TS.SUBLINENUMBER)
	    GROUP BY TENANTID, BATCHNAME, ALTERNATEORDERNUMBER,SUBLINENUMBER
);

COMMIT;


INSERT INTO	cs_stagesalestransaction
	(   TENANTID,
		STAGESALESTRANSACTIONSEQ,
		BATCHNAME,
		ORDERID,
		LINENUMBER,
		SUBLINENUMBER,
		EVENTTYPEID,
		ACCOUNTINGDATE,
		VALUE,
		UNITTYPEFORVALUE,
		COMPENSATIONDATE,
		ALTERNATEORDERNUMBER,
		STAGEPROCESSFLAG,
		GENERICATTRIBUTE1,
		GENERICATTRIBUTE2,
		GENERICATTRIBUTE3,
		GENERICATTRIBUTE4,
		GENERICATTRIBUTE5,
		GENERICATTRIBUTE6,
		GENERICATTRIBUTE7,
		GENERICATTRIBUTE8,
		GENERICATTRIBUTE9,
		GENERICATTRIBUTE10,
		GENERICATTRIBUTE11,
		GENERICATTRIBUTE12,
		GENERICATTRIBUTE13,
		GENERICATTRIBUTE14,
		GENERICATTRIBUTE15,
		GENERICATTRIBUTE16,
		GENERICATTRIBUTE17,
		GENERICATTRIBUTE18,
		GENERICATTRIBUTE19,
		GENERICATTRIBUTE20,
		GENERICATTRIBUTE21,
		GENERICATTRIBUTE22,
		GENERICATTRIBUTE23,
		GENERICATTRIBUTE24,
		GENERICATTRIBUTE25,
		GENERICATTRIBUTE26,
		GENERICATTRIBUTE27,
		GENERICATTRIBUTE28,
		GENERICATTRIBUTE29,
		GENERICATTRIBUTE30,
		GENERICATTRIBUTE31,
		GENERICATTRIBUTE32,
		GENERICNUMBER1,
		UNITTYPEFORGENERICNUMBER1,
		GENERICNUMBER2,
		UNITTYPEFORGENERICNUMBER2,
		GENERICNUMBER3,
		UNITTYPEFORGENERICNUMBER3,
		GENERICNUMBER4,
		UNITTYPEFORGENERICNUMBER4,
		GENERICNUMBER5,
		UNITTYPEFORGENERICNUMBER5,
		GENERICNUMBER6,
		UNITTYPEFORGENERICNUMBER6,
		GENERICDATE1,
		GENERICDATE2,
		GENERICDATE3,
		GENERICDATE4,
		GENERICDATE5,
		GENERICDATE6,
		GENERICBOOLEAN1,
		GENERICBOOLEAN2,
		GENERICBOOLEAN3,
		GENERICBOOLEAN4,
		GENERICBOOLEAN5,
		GENERICBOOLEAN6,
		BUSINESSUNITNAME,
		BUSINESSUNITMAP
	)
	(
	SELECT
		TENANTID,
		STAGESALESTRANSACTIONSEQ,
		BATCHNAME,
		ORDERID,
		LINENUMBER,
		SUBLINENUMBER,
		EVENTTYPEID,
		ACCOUNTINGDATE,
		VALUE,
		UNITTYPEFORVALUE,
		COMPENSATIONDATE,
		ALTERNATEORDERNUMBER,
		STAGEPROCESSFLAG,
		GENERICATTRIBUTE1,
		GENERICATTRIBUTE2,
		GENERICATTRIBUTE3,
		GENERICATTRIBUTE4,
		GENERICATTRIBUTE5,
		GENERICATTRIBUTE6,
		GENERICATTRIBUTE7,
		GENERICATTRIBUTE8,
		GENERICATTRIBUTE9,
		GENERICATTRIBUTE10,
		GENERICATTRIBUTE11,
		GENERICATTRIBUTE12,
		GENERICATTRIBUTE13,
		GENERICATTRIBUTE14,
		GENERICATTRIBUTE15,
		GENERICATTRIBUTE16,
		GENERICATTRIBUTE17,
		GENERICATTRIBUTE18,
		GENERICATTRIBUTE19,
		GENERICATTRIBUTE20,
		GENERICATTRIBUTE21,
		GENERICATTRIBUTE22,
		GENERICATTRIBUTE23,
		GENERICATTRIBUTE24,
		GENERICATTRIBUTE25,
		GENERICATTRIBUTE26,
		GENERICATTRIBUTE27,
		GENERICATTRIBUTE28,
		GENERICATTRIBUTE29,
		GENERICATTRIBUTE30,
		GENERICATTRIBUTE31,
		GENERICATTRIBUTE32,
		GENERICNUMBER1,
		UNITTYPEFORGENERICNUMBER1,
		GENERICNUMBER2,
		UNITTYPEFORGENERICNUMBER2,
		GENERICNUMBER3,
		UNITTYPEFORGENERICNUMBER3,
		GENERICNUMBER4,
		UNITTYPEFORGENERICNUMBER4,
		GENERICNUMBER5,
		UNITTYPEFORGENERICNUMBER5,
		GENERICNUMBER6,
		UNITTYPEFORGENERICNUMBER6,
		GENERICDATE1,
		GENERICDATE2,
		GENERICDATE3,
		GENERICDATE4,
		GENERICDATE5,
		GENERICDATE6,
		GENERICBOOLEAN1,
		GENERICBOOLEAN2,
		GENERICBOOLEAN3,
		GENERICBOOLEAN4,
		GENERICBOOLEAN5,
		GENERICBOOLEAN6,
       (select name from cs_businessunit where name ='DK'),
	   (select mask from cs_businessunit where name ='DK')
	FROM
		EXT.TRYG_SUMMARY_TXN
		WHERE BATCHNAME=:v_batchName
	);

	v_sqlCount = ::ROWCOUNT;  
	CALL EXT.TRYG_LOG(v_procedureName,'Policy Summary transactions inserted into stage table',v_sqlCount);




INSERT INTO	EXT.TRYG_SUMMARY_TXN_ASSIGN
	(   TENANTID,
	 	STAGESALESTRANSACTIONSEQ,
		SETNUMBER,
		BATCHNAME,
		ORDERID,
		LINENUMBER,
		SUBLINENUMBER,
		EVENTTYPEID,
		POSITIONNAME
	)

SELECT  A.TENANTID, A.STAGESALESTRANSACTIONSEQ, ROW_NUMBER() OVER (
      PARTITION BY A.ORDERID
      ORDER BY A.STAGESALESTRANSACTIONSEQ
   ) + A.MAX_SETNUMBER row_num, A.BATCHNAME, A.ORDERID,A.LINENUMBER,A.SUBLINENUMBER,
A.EVENTTYPEID,A.POSITIONNAME FROM (SELECT DISTINCT st.TENANTID, st.STAGESALESTRANSACTIONSEQ ,
LAST_VALUE(sta.SETNUMBER ORDER BY SETNUMBER) AS MAX_SETNUMBER
, ST.BATCHNAME, 
ST.ORDERID,ST.LINENUMBER,ST.SUBLINENUMBER,
ST.EVENTTYPEID,STA.POSITIONNAME
--st.ALTERNATEORDERNUMBER
FROM cs_stagetransactionassign sta
INNER JOIN EXT.TRYG_SUMMARY_TXN ST 
ON st.BATCHNAME=STA.BATCHNAME
AND st.SUBLINENUMBER=sta.SUBLINENUMBER
AND st.ALTERNATEORDERNUMBER = SUBSTR_BEFORE(sta.ORDERID,'-') 
WHERE STA.BATCHNAME=:v_batchName
AND sta.EVENTTYPEID=:v_eventType
GROUP BY st.TENANTID, st.STAGESALESTRANSACTIONSEQ, ST.BATCHNAME, 
ST.ORDERID,ST.LINENUMBER,ST.SUBLINENUMBER,
ST.EVENTTYPEID,STA.POSITIONNAME) A;




INSERT INTO	CS_STAGETRANSACTIONASSIGN
	(   TENANTID,
	 	STAGESALESTRANSACTIONSEQ,
		SETNUMBER,
		BATCHNAME,
		ORDERID,
		LINENUMBER,
		SUBLINENUMBER,
		EVENTTYPEID,
		POSITIONNAME
	)

SELECT 
		DISTINCT TENANTID,
	 	STAGESALESTRANSACTIONSEQ,
		SETNUMBER,
		BATCHNAME,
		ORDERID,
		LINENUMBER,
		SUBLINENUMBER,
		EVENTTYPEID,
		POSITIONNAME
	FROM 
EXT.TRYG_SUMMARY_TXN_ASSIGN;



	v_sqlCount = ::ROWCOUNT;  
	CALL EXT.TRYG_LOG(v_procedureName,'Policy Summary transaction assignment inserted into stage table',v_sqlCount);

UPDATE CS_STAGESALESTRANSACTION SET STAGEPROCESSFLAG=0, STAGEERRORCODE=NULL WHERE BATCHNAME= :v_batchName;

    CALL EXT.TRYG_LOG(v_procedureName,'Policy Summary process successfully completed',0);
	COMMIT;	

	
END